syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

package sf.multiversx.type.v1;

message OutportBlock {
  uint32                       ShardID                = 1 [(gogoproto.jsontag) = "shardID,omitempty"];
  BlockData                    BlockData              = 2 [(gogoproto.jsontag) = "blockData,omitempty"];
  TransactionPool              TransactionPool        = 3 [(gogoproto.jsontag) = "transactionPool,omitempty"];
  HeaderGasConsumption         HeaderGasConsumption   = 4 [(gogoproto.jsontag) = "headerGasConsumption,omitempty"];
  map <string, AlteredAccount> AlteredAccounts        = 5 [(gogoproto.jsontag) = "alteredAccounts,omitempty"];
  repeated string              NotarizedHeadersHashes = 6 [(gogoproto.jsontag) = "notarizedHeadersHashes,omitempty"];
  uint32                       NumberOfShards         = 7 [(gogoproto.jsontag) = "numberOfShards"];
  repeated uint64              SignersIndexes         = 8 [(gogoproto.jsontag) = "signersIndexes,omitempty"];
  uint64                       HighestFinalBlockNonce = 9 [(gogoproto.jsontag) = "highestFinalBlockNonce"];
  bytes                        HighestFinalBlockHash  = 10 [(gogoproto.jsontag) = "highestFinalBlockHash,omitempty"];
}

message BlockData {
  uint32             ShardID              = 1 [(gogoproto.jsontag) = "shardID,omitempty"];
  bytes              HeaderBytes          = 2 [(gogoproto.jsontag) = "headerBytes,omitempty"];
  string             HeaderType           = 3 [(gogoproto.jsontag) = "headerType,omitempty"];
  bytes              HeaderHash           = 4 [(gogoproto.jsontag) = "headerHash,omitempty"];
  Body               Body                 = 5 [(gogoproto.jsontag) = "body,omitempty"];
  repeated MiniBlock IntraShardMiniBlocks = 6 [(gogoproto.jsontag) = "intraShardMiniBlocks,omitempty"];
}

message TransactionPool {
  map<string, TxInfo>     Transactions                               = 1 [(gogoproto.jsontag) = "transactions,omitempty"];
  map<string, SCRInfo>    SmartContractResults                       = 2 [(gogoproto.jsontag) = "smartContractResults,omitempty"];
  map<string, RewardInfo> Rewards                                    = 3 [(gogoproto.jsontag) = "rewards,omitempty"];
  map<string, Receipt>    Receipts                                   = 4 [(gogoproto.jsontag) = "receipts,omitempty"];
  map<string, TxInfo>     InvalidTxs                                 = 5 [(gogoproto.jsontag) = "invalidTxs,omitempty"];
  repeated LogData        Logs                                       = 6 [(gogoproto.jsontag) = "logs,omitempty"];
  repeated string         ScheduledExecutedSCRSHashesPrevBlock       = 7 [(gogoproto.jsontag) = "scheduledExecutedSCRSHashesPrevBlock,omitempty"];
  repeated string         ScheduledExecutedInvalidTxsHashesPrevBlock = 8 [(gogoproto.jsontag) = "scheduledExecutedInvalidTxsHashesPrevBlock,omitempty"];
}

message FeeInfo {
  uint64 GasUsed        = 1 [(gogoproto.jsontag) = "gasUsed"];
  bytes  Fee            = 2 [(gogoproto.jsontag) = "fee,omitempty", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
  bytes  InitialPaidFee = 3 [(gogoproto.jsontag) = "initialPaidFee,omitempty", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
}

message TxInfo {
  Transaction Transaction    = 1 [(gogoproto.jsontag) = "transaction,omitempty"];
  FeeInfo     FeeInfo        = 2 [(gogoproto.jsontag) = "feeInfo,omitempty"];
  uint32      ExecutionOrder = 3 [(gogoproto.jsontag) = "executionOrder"];
}

message SCRInfo {
  SmartContractResult SmartContractResult = 1 [(gogoproto.jsontag) = "smartContractResult,omitempty"];
  FeeInfo             FeeInfo             = 2 [(gogoproto.jsontag) = "feeInfo,omitempty"];
  uint32              ExecutionOrder      = 3 [(gogoproto.jsontag) = "executionOrder"];
}

message LogData{
  string TxHash = 1 [(gogoproto.jsontag) = "txHash"];
  Log    Log    = 2 [(gogoproto.jsontag) = "log"];
}

message RewardInfo {
  RewardTx Reward         = 1 [(gogoproto.jsontag) = "reward,omitempty"];
  uint32   ExecutionOrder = 2 [(gogoproto.jsontag) = "executionOrder"];
}

message HeaderGasConsumption {
  uint64 GasProvided    = 1 [(gogoproto.jsontag) = "gasProvided"];
  uint64 GasRefunded    = 2 [(gogoproto.jsontag) = "gasRefunded"];
  uint64 GasPenalized   = 3 [(gogoproto.jsontag) = "gasPenalized"];
  uint64 MaxGasPerBlock = 4 [(gogoproto.jsontag) = "maxGasPerBlock"];
}

message ValidatorRatingInfo {
  string  PublicKey = 1 [(gogoproto.jsontag) = "publicKey"];
  float   Rating    = 2 [(gogoproto.jsontag) = "rating"];
}

message ValidatorsRating{
  uint32                       ShardID               = 1 [(gogoproto.jsontag) = "shardID"];
  uint32                       Epoch                 = 2 [(gogoproto.jsontag) = "epoch"];
  repeated ValidatorRatingInfo ValidatorsRatingInfo  = 3 [(gogoproto.jsontag) = "validatorsRatingInfo,omitempty"];
}

message RoundInfo {
  uint64          Round            = 1 [(gogoproto.jsontag) = "round"];
  repeated uint64 SignersIndexes   = 2 [(gogoproto.jsontag) = "signersIndexes"];
  bool            BlockWasProposed = 3 [(gogoproto.jsontag) = "blockWasProposed"];
  uint32          ShardId          = 4 [(gogoproto.jsontag) = "shardId"];
  uint32          Epoch            = 5 [(gogoproto.jsontag) = "epoch"];
  uint64          Timestamp        = 6 [(gogoproto.jsontag) = "timestamp"];
}

message RoundsInfo {
  uint32             ShardID    = 1 [(gogoproto.jsontag) = "shardID"];
  repeated RoundInfo RoundsInfo = 2 [(gogoproto.jsontag) = "roundsInfo,omitempty"];
}

message PubKeys {
  repeated bytes Keys = 1 [(gogoproto.jsontag) = "keys,omitempty"];
}

message ValidatorsPubKeys{
  uint32               ShardID                = 1 [(gogoproto.jsontag) = "shardID"];
  map<uint32, PubKeys> ShardValidatorsPubKeys = 2 [(gogoproto.jsontag) = "validatorsPubKeys,omitempty"];
  uint32               Epoch                  = 3 [(gogoproto.jsontag) = "epoch"];
}

message Accounts {
  uint32 ShardID                              = 1 [(gogoproto.jsontag) = "shardID"];
  uint64 BlockTimestamp                       = 2 [(gogoproto.jsontag) = "blockTimestamp"];
  map<string, AlteredAccount> AlteredAccounts = 3 [(gogoproto.jsontag) = "alteredAccounts,omitempty"];
}

message FinalizedBlock {
  uint32 ShardID    = 1 [(gogoproto.jsontag) = "shardID"];
  bytes  HeaderHash = 2 [(gogoproto.jsontag) = "headerHash"];
}

message Shard {
  uint32 ShardID = 1 [(gogoproto.jsontag) = "shardID"];
}


message Body {
  repeated MiniBlock MiniBlocks = 1 [(gogoproto.jsontag) = "miniBlocks,omitempty"];
}

message MiniBlock {
  repeated bytes TxHashes = 1 [(gogoproto.jsontag) = "txHashes,omitempty"];
  uint32         ReceiverShardID = 2 [(gogoproto.jsontag) = "receiverShardID"];
  uint32         SenderShardID = 3 [(gogoproto.jsontag) = "senderShardID"];
  Type           Type = 4 [(gogoproto.jsontag) = "type"];
  bytes          Reserved = 5 [(gogoproto.jsontag) = "reserved,omitempty"];
}

// Transaction holds all the data needed for a value transfer or SC call
message Transaction {
	uint64   Nonce             = 1  [(gogoproto.jsontag) = "nonce"];
	bytes    Value             = 2  [(gogoproto.jsontag) = "value", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
	bytes    RcvAddr           = 3  [(gogoproto.jsontag) = "receiver"];
	bytes    RcvUserName       = 4  [(gogoproto.jsontag) = "rcvUserName,omitempty"];
	bytes    SndAddr           = 5  [(gogoproto.jsontag) = "sender"];
	bytes    SndUserName       = 6  [(gogoproto.jsontag) = "sndUserName,omitempty"];
	uint64   GasPrice          = 7  [(gogoproto.jsontag) = "gasPrice,omitempty"];
	uint64   GasLimit          = 8  [(gogoproto.jsontag) = "gasLimit,omitempty"];
	bytes    Data              = 9  [(gogoproto.jsontag) = "data,omitempty"];
	bytes    ChainID           = 10 [(gogoproto.jsontag) = "chainID"];
	uint32   Version           = 11 [(gogoproto.jsontag) = "version"];
	bytes    Signature         = 12 [(gogoproto.jsontag) = "signature,omitempty"];
	uint32   Options           = 13 [(gogoproto.jsontag) = "options,omitempty"];
	bytes    GuardianAddr      = 14 [(gogoproto.jsontag) = "guardian,omitempty"];
	bytes    GuardianSignature = 15 [(gogoproto.jsontag) = "guardianSignature,omitempty"];
}

message SmartContractResult  {
	uint64   Nonce          = 1  [(gogoproto.jsontag) = "nonce"];
	bytes    Value          = 2  [(gogoproto.jsontag) = "value", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
	bytes    RcvAddr        = 3  [(gogoproto.jsontag) = "receiver"];
	bytes    SndAddr        = 4  [(gogoproto.jsontag) = "sender"];
	bytes    RelayerAddr    = 5  [(gogoproto.jsontag) = "relayer"];
	bytes    RelayedValue   = 6  [(gogoproto.jsontag) = "relayedValue", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
	bytes    Code           = 7  [(gogoproto.jsontag) = "code,omitempty"];
	bytes    Data           = 8  [(gogoproto.jsontag) = "data,omitempty"];
	bytes    PrevTxHash     = 9  [(gogoproto.jsontag) = "prevTxHash"];
	bytes    OriginalTxHash = 10 [(gogoproto.jsontag) = "originalTxHash"];
	uint64   GasLimit       = 11 [(gogoproto.jsontag) = "gasLimit"];
	uint64   GasPrice       = 12 [(gogoproto.jsontag) = "gasPrice"];
	int64    CallType       = 13 [(gogoproto.jsontag) = "callType", (gogoproto.casttype) = "github.com/multiversx/mx-chain-core-go/data/vm.CallType"];
	bytes    CodeMetadata   = 14 [(gogoproto.jsontag) = "codeMetadata,omitempty"];
	bytes    ReturnMessage  = 15 [(gogoproto.jsontag) = "returnMessage,omitempty"];
	bytes    OriginalSender = 16 [(gogoproto.jsontag) = "originalSender,omitempty"];
}

message Log {
    bytes Address         = 1 [(gogoproto.jsontag) = "address"];
    repeated Event Events = 2 [(gogoproto.jsontag) = "events"];
}

message Event {
    bytes Address                   = 1 [(gogoproto.jsontag) = "address"];
    bytes Identifier                = 2 [(gogoproto.jsontag) = "identifier"];
    repeated bytes Topics           = 3 [(gogoproto.jsontag) = "topics"];
    bytes Data                      = 4 [(gogoproto.jsontag) = "data"];
    repeated bytes AdditionalData   = 5 [(gogoproto.jsontag) = "additionalData"];
}

message RewardTx {
	uint64   Round   = 1 [(gogoproto.jsontag) = "round"];
	bytes    Value   = 3 [(gogoproto.jsontag) = "value", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
	bytes    RcvAddr = 4 [(gogoproto.jsontag) = "receiver"];
	uint32   Epoch   = 2 [(gogoproto.jsontag) = "epoch"];
}

enum Type {
  TxBlock = 0;
  StateBlock = 30;
  PeerBlock = 60;
  SmartContractResultBlock = 90;
  InvalidBlock = 120;
  ReceiptBlock = 150;
  RewardsBlock = 255;
}

message AlteredAccount {
  string                    Address        = 1 [(gogoproto.jsontag) = "address"];
  uint64                    Nonce          = 2 [(gogoproto.jsontag) = "nonce"];
  string                    Balance        = 3 [(gogoproto.jsontag) = "balance,omitempty"];
  repeated AccountTokenData Tokens         = 4 [(gogoproto.jsontag) = "tokens,omitempty"];
  AdditionalAccountData     AdditionalData = 5 [(gogoproto.jsontag) = "additionalAccountData,omitempty"];
}

message AccountTokenData {
  uint64                     Nonce          = 1 [(gogoproto.jsontag) = "nonce"];
  string                     Identifier     = 2 [(gogoproto.jsontag) = "identifier"];
  string                     Balance        = 3 [(gogoproto.jsontag) = "balance"];
  string                     Properties     = 4 [(gogoproto.jsontag) = "properties"];
  TokenMetaData              MetaData       = 5 [(gogoproto.jsontag) = "metaData,omitempty"];
  AdditionalAccountTokenData AdditionalData = 6 [(gogoproto.jsontag) = "additionalData,omitempty"];
}

message TokenMetaData {
  uint64         Nonce      = 1 [(gogoproto.jsontag) = "nonce"];
  string         Name       = 2 [(gogoproto.jsontag) = "name"];
  string         Creator    = 3 [(gogoproto.jsontag) = "creator"];
  uint32         Royalties  = 4 [(gogoproto.jsontag) = "royalties"];
  bytes          Hash       = 5 [(gogoproto.jsontag) = "hash"];
  repeated bytes URIs       = 6 [(gogoproto.jsontag) = "uris"];
  bytes          Attributes = 7 [(gogoproto.jsontag) = "attributes"];
}

message AdditionalAccountTokenData {
  bool IsNFTCreate = 1 [(gogoproto.jsontag) = "isNFTCreate,omitempty"];
}

message AdditionalAccountData {
  bool   IsSender         = 1 [(gogoproto.jsontag) = "isSender,omitempty"];
  bool   BalanceChanged   = 2 [(gogoproto.jsontag) = "balanceChanged,omitempty"];
  string CurrentOwner     = 3 [(gogoproto.jsontag) = "currentOwner,omitempty"];
  string UserName         = 4 [(gogoproto.jsontag) = "userName,omitempty"];
  string DeveloperRewards = 5 [(gogoproto.jsontag) = "developerRewards,omitempty"];
  bytes  CodeHash         = 6 [(gogoproto.jsontag) = "codeHash,omitempty"];
  bytes  RootHash         = 7 [(gogoproto.jsontag) = "rootHash,omitempty"];
  bytes  CodeMetadata     = 8 [(gogoproto.jsontag) = "codeMetadata,omitempty"];
}

message Receipt {
	bytes    Value     = 1 [(gogoproto.jsontag) = "value", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
	bytes    SndAddr   = 2 [(gogoproto.jsontag) = "sender"];
	bytes    Data      = 3 [(gogoproto.jsontag) = "data,omitempty"];
	bytes    TxHash    = 4 [(gogoproto.jsontag) = "txHash"];
}
