// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `guardians/guardians.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Guardian {
    // message fields
    pub Address: ::std::vec::Vec<u8>,
    pub ActivationEpoch: u32,
    pub ServiceUID: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Guardian {
    fn default() -> &'a Guardian {
        <Guardian as ::protobuf::Message>::default_instance()
    }
}

impl Guardian {
    pub fn new() -> Guardian {
        ::std::default::Default::default()
    }

    // bytes Address = 1;


    pub fn get_Address(&self) -> &[u8] {
        &self.Address
    }
    pub fn clear_Address(&mut self) {
        self.Address.clear();
    }

    // Param is passed by value, moved
    pub fn set_Address(&mut self, v: ::std::vec::Vec<u8>) {
        self.Address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.Address
    }

    // Take field
    pub fn take_Address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.Address, ::std::vec::Vec::new())
    }

    // uint32 ActivationEpoch = 2;


    pub fn get_ActivationEpoch(&self) -> u32 {
        self.ActivationEpoch
    }
    pub fn clear_ActivationEpoch(&mut self) {
        self.ActivationEpoch = 0;
    }

    // Param is passed by value, moved
    pub fn set_ActivationEpoch(&mut self, v: u32) {
        self.ActivationEpoch = v;
    }

    // bytes ServiceUID = 3;


    pub fn get_ServiceUID(&self) -> &[u8] {
        &self.ServiceUID
    }
    pub fn clear_ServiceUID(&mut self) {
        self.ServiceUID.clear();
    }

    // Param is passed by value, moved
    pub fn set_ServiceUID(&mut self, v: ::std::vec::Vec<u8>) {
        self.ServiceUID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ServiceUID(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.ServiceUID
    }

    // Take field
    pub fn take_ServiceUID(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.ServiceUID, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Guardian {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.Address)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.ActivationEpoch = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.ServiceUID)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.Address);
        }
        if self.ActivationEpoch != 0 {
            my_size += ::protobuf::rt::value_size(2, self.ActivationEpoch, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ServiceUID.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.ServiceUID);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Address.is_empty() {
            os.write_bytes(1, &self.Address)?;
        }
        if self.ActivationEpoch != 0 {
            os.write_uint32(2, self.ActivationEpoch)?;
        }
        if !self.ServiceUID.is_empty() {
            os.write_bytes(3, &self.ServiceUID)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Guardian {
        Guardian::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "Address",
                |m: &Guardian| { &m.Address },
                |m: &mut Guardian| { &mut m.Address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "ActivationEpoch",
                |m: &Guardian| { &m.ActivationEpoch },
                |m: &mut Guardian| { &mut m.ActivationEpoch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "ServiceUID",
                |m: &Guardian| { &m.ServiceUID },
                |m: &mut Guardian| { &mut m.ServiceUID },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Guardian>(
                "Guardian",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Guardian {
        static instance: ::protobuf::rt::LazyV2<Guardian> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Guardian::new)
    }
}

impl ::protobuf::Clear for Guardian {
    fn clear(&mut self) {
        self.Address.clear();
        self.ActivationEpoch = 0;
        self.ServiceUID.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Guardian {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Guardian {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Guardians {
    // message fields
    pub Slice: ::protobuf::RepeatedField<Guardian>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Guardians {
    fn default() -> &'a Guardians {
        <Guardians as ::protobuf::Message>::default_instance()
    }
}

impl Guardians {
    pub fn new() -> Guardians {
        ::std::default::Default::default()
    }

    // repeated .guardians.Guardian Slice = 1;


    pub fn get_Slice(&self) -> &[Guardian] {
        &self.Slice
    }
    pub fn clear_Slice(&mut self) {
        self.Slice.clear();
    }

    // Param is passed by value, moved
    pub fn set_Slice(&mut self, v: ::protobuf::RepeatedField<Guardian>) {
        self.Slice = v;
    }

    // Mutable pointer to the field.
    pub fn mut_Slice(&mut self) -> &mut ::protobuf::RepeatedField<Guardian> {
        &mut self.Slice
    }

    // Take field
    pub fn take_Slice(&mut self) -> ::protobuf::RepeatedField<Guardian> {
        ::std::mem::replace(&mut self.Slice, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Guardians {
    fn is_initialized(&self) -> bool {
        for v in &self.Slice {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.Slice)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.Slice {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.Slice {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Guardians {
        Guardians::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Guardian>>(
                "Slice",
                |m: &Guardians| { &m.Slice },
                |m: &mut Guardians| { &mut m.Slice },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Guardians>(
                "Guardians",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Guardians {
        static instance: ::protobuf::rt::LazyV2<Guardians> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Guardians::new)
    }
}

impl ::protobuf::Clear for Guardians {
    fn clear(&mut self) {
        self.Slice.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Guardians {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Guardians {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19guardians/guardians.proto\x12\tguardians\"n\n\x08Guardian\x12\x18\
    \n\x07Address\x18\x01\x20\x01(\x0cR\x07Address\x12(\n\x0fActivationEpoch\
    \x18\x02\x20\x01(\rR\x0fActivationEpoch\x12\x1e\n\nServiceUID\x18\x03\
    \x20\x01(\x0cR\nServiceUID\"6\n\tGuardians\x12)\n\x05Slice\x18\x01\x20\
    \x03(\x0b2\x13.guardians.GuardianR\x05Sliceb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
